omri.wolf1
galbum

UML DIFFERENCES:
In the beggining we tried to think exactly what we will need and what we need to implement,
We used the minimal API which was given in the description of the project and added Sword and CrossBow to the avatar as bonuses.
In the end we used the minimal API and also decided to implement night and moon togehter with sun and sunHalo. Also, we decided the make the 
avatar shoot fireballs instead of having a boring sword or crossbow. In the end we decided to practice using some 
of the design patterns used in this course such as Factory for the enemy etc'.
We learned that plannig a UML in advance is helpful up to a certain amount,
We decided to plan ahead before every class we implemented and we found that very useful. 

INFINITE WORLD:
We implemented two methods, one for extending the world to the left and the other is extending to the right.
They both receive two arguments: The start and end coordinate. Then, we normalize the start and end coordinates so it will be 
coordinated with the block size. Then we build the world (terrain and trees) from the start until the end coordinate.
The important thing is after creating the extention we delete every object which isn't shown in the image.
We also used the override method of update so we could syncronize the movement of our avatar with the extention of the world.

TREES PACKAGE:
We used two classes: Leaf and Tree.
The leaf class is in charge of the collision between the leaf and the ground.
The tree class creates the trees in a given range, 
We decided to implement a private method for every mission:
create the tree trunk, create leaves, leaves falling, leaves animation, tree animation exc'
Then we use one method (create) to gather everything and create one tree.
Then the createInRange method is in charge of randomly choosing where to create the trees.

DILEMMAS:
1. We had a dilema of how to implement the Tree pacakge, because this package is very busy.
In the beginning I thought I should implement a seperate class for the animation and another class for the transitions.
I chose to use lambdas and callbacks instead. Then I could use the modularity principle and each private method 
would be short and efficent.

2. When implementing a bonus class, Projectile, which is a class in the package Weapons, we had the dilemma which
design to implemented. we wanted projectile to be modular for all kinds of projectiles, fireballs, arrows, rock,
which look, behave and react when hitting an object in different ways, but their physics (in the game) is basically the same,
acceleration in the X axis, a hit effect.
we decided to implement an abstract class, Projectile, that all kinds of different projectiles can inherit from.
For the hit effect we decided to add a "setHitEffect" method to set a Consumer<Vector2> callback, which gets the location
of the hit and does some effect (like create an explosion in the case of the fireball).
we decided to set the callback in a "set" method because we wanted the callback to be able to affect "this", and be able
to use all the resources that the Projectile class has, like gameObjects, ImageReader, SoundReader and more.
So in the end Projectile is a combination of an abstract class with a callback mechanism for the hit effect.

BONUS:
1. ONLINE HIGHSCORES! When you finish the game, you can enter your name and score (more on that later)
   to an online Highscores database. The game will show you the top 5 players in the history of the game.
2. Fireballs! press G to cast a Fireball spell from the tip of your hands, and destroy anything in your path!
   only 1 Fireball can be present on screen on each moment, and has a maximum distance travel of 1000 pixels.
3. ENEMIES WITH (SIMPLE) AI! You want to shoot your fireballs at something right? Skeletons are chasing you througout the world.
   Kill them with fireballs to gain score!
4. DEATH! If enemies touch or hit you 3 times, you are dead. Your health is shown as hearts above your head.
3. MOON & RAIN! Like in our tiny country, our PEPSE world has a not so small chance for rain, which can last
   from 10 to 40 seconds. Also, a moon accompanies our sun and replaces it when it goes down to brighten up the night.
3. IMMERSION! Soundtrack, Soundeffects & animations. Relaxing music, sound effects to everything.
   animations that range from 2 to 7 frames. The asset folder is becoming substantial.
